// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
import HTTPTypes
public struct Client: APIProtocol {
    /// The underlying HTTP client.
    private let client: UniversalClient
    /// Creates a new client.
    /// - Parameters:
    ///   - serverURL: The server URL that the client connects to. Any server
    ///   URLs defined in the OpenAPI document are available as static methods
    ///   on the ``Servers`` type.
    ///   - configuration: A set of configuration values for the client.
    ///   - transport: A transport that performs HTTP operations.
    ///   - middlewares: A list of middlewares to call before the transport.
    public init(
        serverURL: Foundation.URL,
        configuration: Configuration = .init(),
        transport: any ClientTransport,
        middlewares: [any ClientMiddleware] = []
    ) {
        self.client = .init(
            serverURL: serverURL,
            configuration: configuration,
            transport: transport,
            middlewares: middlewares
        )
    }
    private var converter: Converter {
        client.converter
    }
    /// Perform a test connection check to validate the server exists
    ///
    /// - Remark: HTTP `GET /ok`.
    /// - Remark: Generated from `#/paths//ok/get(ok)`.
    public func ok(_ input: Operations.Ok.Input) async throws -> Operations.Ok.Output {
        try await client.send(
            input: input,
            forOperation: Operations.Ok.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/ok",
                    parameters: []
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .get
                )
                suppressMutabilityWarning(&request)
                return (request, nil)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    return .ok(.init())
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
    /// Send an array of emails to the Email Server Gateway with credentials for queued processing
    ///
    /// - Remark: HTTP `POST /smtp/queue`.
    /// - Remark: Generated from `#/paths//smtp/queue/post(smtp/queue)`.
    public func smtpQueue(_ input: Operations.SmtpQueue.Input) async throws -> Operations.SmtpQueue.Output {
        try await client.send(
            input: input,
            forOperation: Operations.SmtpQueue.id,
            serializer: { input in
                let path = try converter.renderedPath(
                    template: "/smtp/queue",
                    parameters: []
                )
                var request: HTTPTypes.HTTPRequest = .init(
                    soar_path: path,
                    method: .post
                )
                suppressMutabilityWarning(&request)
                try converter.setHeaderFieldAsURI(
                    in: &request.headerFields,
                    name: "smtp-provider",
                    value: input.headers.smtpProvider
                )
                try converter.setHeaderFieldAsURI(
                    in: &request.headerFields,
                    name: "smtp-username",
                    value: input.headers.smtpUsername
                )
                try converter.setHeaderFieldAsURI(
                    in: &request.headerFields,
                    name: "smtp-password",
                    value: input.headers.smtpPassword
                )
                let body: OpenAPIRuntime.HTTPBody?
                switch input.body {
                case let .json(value):
                    body = try converter.setRequiredRequestBodyAsJSON(
                        value,
                        headerFields: &request.headerFields,
                        contentType: "application/json; charset=utf-8"
                    )
                }
                return (request, body)
            },
            deserializer: { response, responseBody in
                switch response.status.code {
                case 200:
                    return .ok(.init())
                case 500:
                    return .internalServerError(.init())
                default:
                    return .undocumented(
                        statusCode: response.status.code,
                        .init(
                            headerFields: response.headerFields,
                            body: responseBody
                        )
                    )
                }
            }
        )
    }
}
